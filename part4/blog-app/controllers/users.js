const bcrypt = require("bcrypt");

const usersRouter = require("express").Router();
const User = require("../models/user");

usersRouter.get("/", async (request, response) => {
    response.json(await User.find({}).populate("blogs", { user: 0, likes: 0 }));
});

usersRouter.post("/", async (request, response) => {
    const { username, name, password } = request.body;

    const error =
        validateRequiredField(username, 3, "username") ||
        validateRequiredField(password, 3, "password");

    if (error) return response.status(400).send({ error });

    // Username uniqueness. An error generated by the uniqueness constraint of
    // the User schema is considered a server error (500), and it's a last measure
    const user = await User.findOne({ username });
    if (user) {
        return response
            .status(409)
            .send({ error: "A user with that username exists already" });
    }

    const passwordHash = await bcrypt.hash(password, 10);
    const newUser = await new User({ username, name, passwordHash }).save();

    response.status(201).json(newUser);
});

const validateRequiredField = (field, minLength, name) => {
    if (!field) return `Missing '${name}'`;
    else if (field.length < minLength)
        return `'${name}' must be at least ${minLength} character(s)`;
};

module.exports = usersRouter;
